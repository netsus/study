{
  
    
        "post0": {
            "title": "Title",
            "content": "&#54617;&#49845; &#47785;&#54364; . 파이썬 프로젝트의 기본이 되는 모듈과 패키지, 그리고 프로젝트의 개념에 대해서 배웁니다. . 파이썬에서 여러가지 모듈을 제공합니다. 이러한 모듈과 패키지를 구성하고, 실제로 다른 개발자가 만든 모듈을 사용하는 방법까지 알아봅니다. . &#47784;&#46280; . 패키지를 구성하는 작은 단위 ex) 레고 블록 | . &lt;img src=attachment:image.png width=800&gt; . 프로그램에서 모듈은 작은 코드 조각들이다. 모듈화가 잘되어 있으면 다른 사람이 사용하기 쉽다 . | 이렇게 모듈화한 코드들을 모아서 패키지를 만들고, 이를 배포한것을 프로젝트라고 한다. . | . Module &#47564;&#46308;&#44592; . 파이썬에서 module은 .py 파일을 의미 | import 문을 사용해서 module 호출 | . &lt;img src=attachment:image.png width=800&gt; namespace . 변수가 객체를 가리키고 있는것을 namespace라고 한다. . 왜 필요할까? 코드에서 모든 변수와 함수명을 겹치지 않게 하기는 어렵다. 그래서 네임스페이스를 통해 변수 혹은 함수가 통용될 수 있는 범위를 제한한다. . 모듈 안에는 함수와 클래스 등이 존재 | from 과 import 키워드를 사용해 필요한 내용만 골라 호출 | 그냥 import 하면 해당 코드가 모드 메모리로 올라간다. 그래서 from과 import를 사용해 필요한 내용만 메모리에 올라가게 할 수 있다. (namespace를 이용) | . *TIP 아래 코드처럼 alias를 이용해 어떤 패키지의 메소드를 썼는지 명시하는게 가독성 측면에서 매우 좋다. . import pandas as pd pd.DataFrame() . &#54056;&#53412;&#51648; . 하나의 대형 프로젝트를 만드는 코드의 묶음 | 다양한 모듈의 합, 폴더로 연결 | __init, __main 등 키워드 파일명이 사용된다. | 다양한 오픈 소스들이 모두 패키지로 관리된다. | . Package &#47564;&#46308;&#44592; . 폴더별로 init.py 구성하기 현재 폴더가 패키지임을 알리는 초기화 스크립트 | python 3.3 부터는 없어도 상관없다. (그래도 써주는게 권장) | import와 __all__ keyword 사용 __all__ keyword: 모듈들의 이름을 써준다. (python 3.3부터 안해도 되는데 써주는게 권장) 아래 그림을 보면 이해가 된다. | . | . | . &lt;img src=attachment:image.png width=800&gt; &#49892;&#51228; &#44036;&#45800;&#55176; &#54056;&#53412;&#51648; &#44396;&#49457;&#54616;&#45716; &#50696;&#51228; . &lt;img src=attachment:image.png width=800&gt; init.py &#51089;&#49457; . game 폴더 안에 init.py 생성 . all 변수에 사용되는 서브 패키지들(폴더이름들)을 사용 | . &lt;img src=attachment:image-3.png width=800&gt; main.py &#51089;&#49457; . game 폴더의 __main__.py는 python game을 했을 때, 실행될 코드이다 | . &lt;img src=attachment:image-3.png width=800&gt; python game 으로 실행 -&gt; __main__.py가 실행됨 . &lt;img src=attachment:image-4.png width=400&gt; &#50724;&#54536;&#49548;&#49828; &#46972;&#51060;&#48652;&#47084;&#47532; &#49324;&#50857;&#54616;&#44592; . &#44032;&#49345;&#54872;&#44221; . 가상환경을 통해 오픈소스 라이브러리들을 독립적으로 쓸 수 있다. | miniconda 좋다. | .",
            "url": "https://netsus.github.io/study/2022/09/22/Module&Package.html",
            "relUrl": "/2022/09/22/Module&Package.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "&#54617;&#49845; &#47785;&#54364; . 프로그램을 제대로 만들기 위해 알아야하는 3가지 정리 . 예외 처리(Exception) | 파일에 존재하는 데이터 읽고 쓰기(File) | 프로그램을 진행하면서 기록을 남기는 로깅(Log) | &#50696;&#50808; &#52376;&#47532;(Exception) . 예상 가능한 예외 . 사전에 인지할 수 있는 예외 -&gt; 명시적으로 정의해야 한다. ex) 사용자의 잘못된 입력 | python에선 exception을 발생시키고, exception handling으로 처리. | . | 예상이 불가능한 예외 . 인터프리터 과정에서 발생하는 예외 (고려하지 못한 경우로인해 발생) -&gt; 인터프리터가 자동으로 에러메시지호출 ex) 정수 0으로 나눔. 오타 | . | &#50696;&#50808;&#52376;&#47532; &#47928;&#48277; . try ~ except 문법 사용 | try ~ except ~ else ~ finaaly로 쓸 수도 있음 | . for i in range(5): print(f&quot;10을 {i}로 나누면 &quot;,end=&#39; &#39;) try: print(10/i) except ZeroDivisionError: print(&quot;0으로 나누면 무한대!&quot;) . 10을 0로 나누면 0으로 나누면 무한대! 10을 1로 나누면 10.0 10을 2로 나누면 5.0 10을 3로 나누면 3.3333333333333335 10을 4로 나누면 2.5 . Built-in Exception . 파이썬에서 기본적으로 제공하는 예외 . IndexError : List의 인덱스 범위 넘어갈 때 | NameError : 존재하지 않는 변수 호출 | ZeroDivisionError : 0으로 수를 나눌때 | ValueError : 변환할 수 없는 문자/숫자를 변환할 때 | FileNotFoundError : 존재하지 않는 파일 호출시 | raise &#44396;&#47928; . 강제로 Exception을 발생raise &lt;Exception Type&gt;(예외정보) (ex) raise ValueError(&quot;값이 없다!&quot;) . | . assert &#44396;&#47928; . 논리가 False로 나오면 예외 발생assert 예외 조건 assert a==b # a와 b가 다르면 예외 발생 . | . File Handling . 파일은 기본적으로 text파일과 binary 파일로 나뉜다. | 파이썬에선 파일 처리를 위해 &quot;open&quot; 키워드를 사용한다. | . os module . os 모듈을 사용하여 Directory를 다룰 수 있다. Ex)import os os.mkdir(&quot;log&quot;) # log 디렉토리 생성 . | . &#46356;&#47113;&#53664;&#47532; &#49373;&#49457; . import os os.mkdir(&quot;log&quot;) . try: os.mkdir(&quot;log&quot;) except: print(&quot;Already created&quot;) . Already created . &#54028;&#51068; or &#46356;&#47113;&#53664;&#47532; &#51316;&#51116; &#54869;&#51064; . os.path.exists(&quot;log&quot;) . True . os.path.isfile(&quot;file.ipynb&quot;) . True . shutil module - &#54028;&#51068; &#48373;&#49324; . import shutil source= &quot;README.md&quot; # os.path.join쓰는 이유: 파일 경로를 합칠 때 seperator가 OS마다 다르다. # 윈도우:₩₩, Mac, Linux:/, 등등 dest = os.path.join(&quot;log&quot;,&quot;test.txt&quot;) dest . &#39;log/test.txt&#39; . shutil.copy(source,dest) . &#39;log/test.txt&#39; . !ls log . test.txt . pathlib - path&#47484; &#44061;&#52404;&#47196; &#45796;&#47352; . import pathlib cwd = pathlib.Path.cwd() cwd . PosixPath(&#39;/Users/cwj/ToyProject/00_data_analysis/00_BoostCamp/week1_python&#39;) . cwd / &quot;adsf&quot; . PosixPath(&#39;/Users/cwj/ToyProject/00_data_analysis/00_BoostCamp/week1_python/adsf&#39;) . list(cwd.glob(&quot;*1*&quot;)) . [PosixPath(&#39;/Users/cwj/ToyProject/00_data_analysis/00_BoostCamp/week1_python/4_1_Python_OOP.ipynb&#39;), PosixPath(&#39;/Users/cwj/ToyProject/00_data_analysis/00_BoostCamp/week1_python/3_1_Python_Data_Structure.ipynb&#39;), PosixPath(&#39;/Users/cwj/ToyProject/00_data_analysis/00_BoostCamp/week1_python/5_1_File&amp;Exception&amp;Log.ipynb&#39;), PosixPath(&#39;/Users/cwj/ToyProject/00_data_analysis/00_BoostCamp/week1_python/2_1_Variables.ipynb&#39;)] . print(cwd.parent) print(cwd.parent.parent) . /Users/cwj/ToyProject/00_data_analysis/boostcourse /Users/cwj/ToyProject/00_data_analysis . list(cwd.parents) . [PosixPath(&#39;/Users/cwj/ToyProject/00_data_analysis/boostcourse&#39;), PosixPath(&#39;/Users/cwj/ToyProject/00_data_analysis&#39;), PosixPath(&#39;/Users/cwj/ToyProject&#39;), PosixPath(&#39;/Users/cwj&#39;), PosixPath(&#39;/Users&#39;), PosixPath(&#39;/&#39;)] . Pickle . 파이썬의 객체를 파일로 저장하게 해주는 built-in 객체 | 데이터, object등 실행중 정보를 저장 -&gt; 불러와서 사용 가능 | 저장해야하는 정보, 모델 등 활용이 많음 | . list &#45796;&#47336;&#44592; . import pickle li=[0,1,2,3,4,5] ## pickle은 python에 특화된 binary 파일이다. with open(&quot;list.pickle&quot;,&quot;wb&quot;) as f: pickle.dump(li, f) # 위에서 생성한 리스트를 list.pickle로 저장 with open(&quot;list.pickle&quot;,&quot;rb&quot;) as fi: test = pickle.load(fi) # list.pickle 읽어서 출력 -&gt; list 잘 불러와졌다. . print(type(test)) print(test) . &lt;class &#39;list&#39;&gt; [0, 1, 2, 3, 4, 5] . &#45936;&#51060;&#53552;&#54532;&#47112;&#51076; &#45796;&#47336;&#44592; . import pandas as pd df = pd.DataFrame({&#39;A&#39;:[0,1],&#39;B&#39;:[2,3]}) df . A B . 0 0 | 2 | . 1 1 | 3 | . with open(&quot;df.pickle&quot;,&quot;wb&quot;) as f: pickle.dump(df, f) # 위에서 생성한 데이터 프레임을 df.pickle로 저장 with open(&quot;df.pickle&quot;,&quot;rb&quot;) as fi: test = pickle.load(fi) # df.pickle 읽기 # 출력해보면 pandas의 데이터프레임이 그대로 잘 출력됨. print(type(test)) test . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; . A B . 0 0 | 2 | . 1 1 | 3 | . &#54632;&#49688; &#45796;&#47336;&#44592; . import numpy as np print(np.array) . &lt;built-in function array&gt; . with open(&quot;array.pickle&quot;,&quot;wb&quot;) as f: pickle.dump(np.array, f) with open(&quot;array.pickle&quot;,&quot;rb&quot;) as fi: arr = pickle.load(fi) k = arr(list(range(10))) print(type(k)) print(k) . &lt;class &#39;numpy.ndarray&#39;&gt; [0 1 2 3 4 5 6 7 8 9] . &#53364;&#47000;&#49828; &#45796;&#47336;&#44592; . # 이후에 multiply 메소드에 들어오는 값을 multiplier와 곱해서 반환 class Multiply(object): def __init__(self, multiplier): self.multiplier = multiplier def multiply(self, num): return num * self.multiplier mply = Multiply(3) # multiplier를 3으로 지정 mply.multiply(3) # multiplier * 3 반환 =&gt; 9 . 9 . with open(&quot;mply_object.pickle&quot;,&quot;wb&quot;) as f: pickle.dump(mply, f) with open(&quot;mply_object.pickle&quot;,&quot;rb&quot;) as fi: mply_pickle = pickle.load(fi) print(type(mply_pickle)) mply_pickle.multiply(10) . &lt;class &#39;__main__.Multiply&#39;&gt; . 30 . Logging . 프로그램이 실행되는 동안의 정보를 남기는 것 . 남기는 내용: 유저의 행동, Exception | 어디에 남기는지: Console, 파일, DB | 로그를 분석하여 의미있는 결과를 도출할 수 있다. | 실행 시점에 남겨야하는 기록, 개발시점에 남겨야하는 기록이 있다 | . import logging logging.critical(&quot;크~리티컬! 힛트!&quot;) . CRITICAL:root:크~리티컬! 힛트! . Logging level . DEBUG &gt; INFO &gt; WARNIGN &gt; ERROR &gt; Critical | 시점에 따라 다른 log가 남을 수 있도록 지원 | . import logging if __name__==&#39;__main__&#39;: logger = logging.getLogger(&quot;main&quot;) # default 레벨은 warning부터 # level을 Debug로 바꿔서 모든 로깅 다 나오게 설정 logging.basicConfig(level=logging.DEBUG) logger.debug(&quot;디버그&quot;) logger.info(&quot;인포&quot;) logger.warning(&quot;워닝&quot;) logger.error(&quot;에뤄&quot;) logger.critical(&quot;크뤼티칼!&quot;) . WARNING:main:워닝 ERROR:main:에뤄 CRITICAL:main:크뤼티칼! . import logging logger = logging.getLogger(&quot;mylogger&quot;) # Logger 선언 stream_handler = logging.StreamHandler() # Logger의 output 방법 선언 logger.addHandler(stream_handler) # Logger의 output 등록 logging.basicConfig(level=logging.DEBUG) # python 3.8 이후의 레벨 설정 # logger.setLevel(logging.DEBUG) # 레벨 설정 . logger.debug(&quot;디~버그!&quot;) . 디~버그! DEBUG:mylogger:디~버그! . logger.handlers # 핸들러 종류 보기 . [&lt;StreamHandler stderr (NOTSET)&gt;] . logger.handlers.clear() # 핸들러 클리어 . Logging &#49444;&#51221; . configparser - 파일에 설정 | argparser - 실행시점에 설정 | configparser . Section, Key, Value 값의 형태의 환경설정 File 사용 | 설정 파일을 Dict Type으로 호출해서 사용 | . !cat example.cfg . [SectionOne] Status: Single Name: Derek Value: Yes Age: 30 Single: True [SectionTwo] FavoriteColor = Green [SectionThree] FamilyName: Johnson . import configparser config = configparser.ConfigParser() config.sections() config.read(&#39;example.cfg&#39;) config.sections() . [&#39;SectionOne&#39;, &#39;SectionTwo&#39;, &#39;SectionThree&#39;] . print(f&quot;config 타입: {type(config)} ncofig: {config}&quot;) . config 타입: &lt;class &#39;configparser.ConfigParser&#39;&gt; cofig: &lt;configparser.ConfigParser object at 0x106fe8d30&gt; . for key in config[&#39;SectionOne&#39;]: value = config[&#39;SectionOne&#39;][key] print(f&quot;{key} : {value}&quot;) # config의 SectionOne status의 값 출력 (대소문자 상관없는듯) config[&#39;SectionOne&#39;][&quot;status&quot;] . status : Single name : Derek value : Yes age : 30 single : True . &#39;Single&#39; . argparser . Command-Line Option으로 프로그램 실행시 세팅 | 대부분의 Console 기반 Python 프로그램이 기본으로 제공 | . import argparse parser = argparse.ArgumentParser(description=&#39;Sum two integers.&#39;) parser.add_argument(&#39;-a&#39;, &quot;--a_value&quot;, dest=&quot;A_value&quot;, help=&quot;A integers&quot;, type=int) parser.add_argument(&#39;-b&#39;, &quot;--b_value&quot;, dest=&quot;B_value&quot;, help=&quot;B integers&quot;, type=int) args = parser.parse_args(args=[]) # args=[]를 넣어줘야 주피터에서 실행된다. print(args) args.a, args.b = map(int, input(&quot;a, b:&quot;).split(&#39;,&#39;)) # 주피터에서 argparse 쓰기위해 input을 사용 print(args.a) print(args.b) print(args.a + args.b) . Namespace(A_value=None, B_value=None) a, b:10, 20 10 20 30 . Logging formmater . import logging if __name__==&#39;__main__&#39;: # 날짜 시간 레벨 processID 메시지 formatter = logging.Formatter(&#39;%(asctime)s %(levelname)s %(process)d %(message)s&#39;) logger = logging.getLogger() # formatter 추가 -&gt; stream_handler stream_handler = logging.StreamHandler() stream_handler.setFormatter(formatter) logger.addHandler(stream_handler) # default 레벨은 warning부터 # level을 Debug로 바꿔서 모든 로깅 다 나오게 설정 logging.basicConfig(level=logging.DEBUG) logger.debug(&quot;디버그&quot;) logger.info(&quot;인포&quot;) logger.warning(&quot;워닝&quot;) logger.error(&quot;에뤄&quot;) logger.critical(&quot;크뤼티칼!&quot;) . WARNING:root:워닝 2022-09-22 12:17:44,576 WARNING 51085 워닝 ERROR:root:에뤄 2022-09-22 12:17:44,585 ERROR 51085 에뤄 CRITICAL:root:크뤼티칼! 2022-09-22 12:17:44,586 CRITICAL 51085 크뤼티칼! . logging.conf &#54028;&#51068; &#51069;&#50612;&#50752;&#49436; &#47196;&#44613; . import logging import logging.config logging.config.fileConfig(&#39;logging.conf&#39;) conf_logger = logging.getLogger() logger.debug(&quot;디버그&quot;) logger.info(&quot;인포&quot;) logger.warning(&quot;워닝&quot;) logger.error(&quot;에뤄&quot;) logger.critical(&quot;크뤼티칼!&quot;) . 2022.09.22 12:18:15 PM - root - DEBUG - 디버그 2022.09.22 12:18:15 PM - root - INFO - 인포 2022.09.22 12:18:15 PM - root - WARNING - 워닝 2022.09.22 12:18:15 PM - root - ERROR - 에뤄 2022.09.22 12:18:15 PM - root - CRITICAL - 크뤼티칼! .",
            "url": "https://netsus.github.io/study/2022/09/22/File&Exception&Logging.html",
            "relUrl": "/2022/09/22/File&Exception&Logging.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://netsus.github.io/study/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://netsus.github.io/study/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "❤️ Python is Love ❤️ netsus 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://netsus.github.io/study/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://netsus.github.io/study/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}